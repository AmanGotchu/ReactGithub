{"version":3,"sources":["hiss.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","emailHandler","event","console","log","target","value","setState","email","passwordHandler","password","loginHandler","state","delay","result","handleScan","bind","data","this","err","error","style","styles","pageContainer","formContainer","onSubmit","formHandler","titleContainer","logoContainer","src","require","fontSize","type","placeholder","onChange","inputContainer","Button","onClick","submitContainer","Component","display","marginLeft","height","width","justifyContent","marginTop","marginBottom","flexDirection","paddingLeft","paddingRight","border","backgroundColor","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,+ICerCC,G,wBACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAoBRC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEC,MAAON,EAAMG,OAAOC,SAvBpB,EA0BlBG,gBAAkB,SAACP,GACjBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEG,SAAUR,EAAMG,OAAOC,SA5BvB,EA+BlBK,aAAe,SAACT,GACdC,QAAQC,IAAI,WA9BZ,EAAKQ,MAAQ,CACXC,MAAO,IACPC,OAAQ,YACRN,MAAO,GACPE,SAAU,IAGZ,EAAKK,WAAa,EAAKA,WAAWC,KAAhB,gBATF,E,wEAYPC,GACTC,KAAKX,SAAS,CACZO,OAAQG,M,kCAGAE,GACVhB,QAAQiB,MAAMD,K,+BAkBd,OACE,yBAAKE,MAAOC,EAAOC,eACjB,0BAAMF,MAAOC,EAAOE,cAAeC,SAAUP,KAAKQ,aAChD,yBAAKL,MAAOC,EAAOK,gBACjB,yBACEN,MAAOC,EAAOM,cACdC,IAAKC,EAAQ,MAEf,uBAAGT,MAAO,CAAEU,SAAU,SAAtB,gBAEF,2BACEC,KAAK,OACLC,YAAY,QACZ3B,MAAOY,KAAKN,MAAMJ,MAClB0B,SAAUhB,KAAKjB,aACfoB,MAAOC,EAAOa,iBAEhB,2BACEH,KAAK,WACLC,YAAY,WACZ3B,MAAOY,KAAKN,MAAMF,SAClBwB,SAAUhB,KAAKT,gBACfY,MAAOC,EAAOa,iBAEhB,kBAACC,EAAA,EAAD,CACEC,QAASnB,KAAKP,aACdU,MAAOC,EAAOgB,iBAFhB,e,GA7DQC,cAyEZjB,EAAS,CACXM,cAAgB,CACdY,QAAS,OACTC,WAAY,QACZC,OAAQ,OAEVnB,cAAgB,CACdiB,QAAS,OACTE,OAAQ,QACRC,MAAO,QACPC,eAAgB,UAElBjB,eAAgB,CACdkB,UAAW,OACXC,aAAc,OAEhBtB,cAAe,CACbgB,QAAS,OACTO,cAAe,SACfH,eAAgB,SAChBD,MAAO,OACPK,YAAa,OACbC,aAAc,OACdP,OAAQ,QACRQ,OAAQ,iBAEVf,eAAgB,CACdO,OAAQ,MACRM,YAAa,KACbF,aAAc,MACdf,SAAU,IAEZO,gBAAiB,CACfI,OAAQ,OACRQ,OAAQ,gBACRC,gBAAiB,UACjBC,MAAO,QACPrB,SAAU,KAIDhC,ICrHKsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ab7402bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hiss.396f0bda.svg\";","import React, { Component } from 'react';\nimport { View } from 'react';\nimport QrReader from 'react-qr-reader';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// <QrReader\n//   delay={this.state.delay}\n//   style={previewStyle}\n//   onError={this.handleError}\n//   onScan={this.handleScan}\n//   />\n// <p>{this.state.result}</p>\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      delay: 100,\n      result: 'No result',\n      email: '',\n      password: ''\n    }\n\n    this.handleScan = this.handleScan.bind(this)\n  }\n\n  handleScan(data){\n    this.setState({\n      result: data,\n    })\n  }\n  handleError(err){\n    console.error(err)\n  }\n\n  emailHandler = (event) => {\n    console.log(event.target.value);\n    this.setState({ email: event.target.value });\n  }\n\n  passwordHandler = (event) => {\n    console.log(event.target.value);\n    this.setState({ password: event.target.value });\n  }\n\n  loginHandler = (event) => {\n    console.log(\"Submit\");\n  }\n\n  render(){\n    return(\n      <div style={styles.pageContainer}>\n        <form style={styles.formContainer} onSubmit={this.formHandler}>\n          <div style={styles.titleContainer}>\n            <img\n              style={styles.logoContainer}\n              src={require(\"./hiss.svg\")}\n            />\n            <p style={{ fontSize: '18px' }}>by TAMUhack</p>\n          </div>\n          <input\n            type='text'\n            placeholder='Email'\n            value={this.state.email}\n            onChange={this.emailHandler}\n            style={styles.inputContainer}\n          />\n          <input\n            type='password'\n            placeholder='Password'\n            value={this.state.password}\n            onChange={this.passwordHandler}\n            style={styles.inputContainer}\n          />\n          <Button\n            onClick={this.loginHandler}\n            style={styles.submitContainer}\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst styles = {\n    logoContainer : {\n      display: 'flex',\n      marginLeft: '-10px',\n      height: '7vh'\n    },\n    pageContainer : {\n      display: 'flex',\n      height: '100vh',\n      width: '100vw',\n      justifyContent: 'center'\n    },\n    titleContainer: {\n      marginTop: '10vh',\n      marginBottom: '8vh'\n    },\n    formContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      width: '80vw',\n      paddingLeft: '10vw',\n      paddingRight: '10vw',\n      height: '100vh',\n      border: '2px solid red',\n    },\n    inputContainer: {\n      height: '7vh',\n      paddingLeft: '4%',\n      marginBottom: '7vh',\n      fontSize: 20\n    },\n    submitContainer: {\n      height: '10vh',\n      border: '2px solid red',\n      backgroundColor: '#FF7C93',\n      color: 'white',\n      fontSize: 20\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}